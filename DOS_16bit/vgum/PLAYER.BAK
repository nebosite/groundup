#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include "math.h"
#include "vatfree.h"
#include "svgacc.h"
#include "fourier.h"
#include "string.h"
#include "alloc.h"

void player(char *musicfile);
void channelbits(void);

extern WORD dma_bufferlen;         // Handles to Vat mix buffer
extern BYTE VFAR *dma_buffer[2];

#define ASIZE 1050

signed int bigbuffer[5000];        // Big buffer to hold long segment of sound
float outdata[ASIZE],outidata[ASIZE];
int enhanced[5000];
char errstring[256];



/**************************************************************************
	void dofft(int *inarray)

	DESCRIPTION:  No brainer FFT.  Calculate FFT on input array and
		returns it in the same array.

	INPUT
		inarray			Pointer to _SIGNED_ array of integers (sample data).
								Must be at least 256 integers of data.
								FFT is returned back in integers 1-127 in the range
								of 0-100.

**************************************************************************/
void dofft(int *inarray)
{
	int i;
	int numsamples=256;
	int smoothfactor = 0.5;
	int max = 100;
	double lfac;

	fft_float ( numsamples,inarray,NULL,outdata,outidata);

	for(i = 1; i < numsamples/2; i++) {
													 // lfac is a correction factor I use
													 // because the FFT signal is really strong
													 // and noisy in the low frequency region.
													 // This factor chops the low frequency
													 // signals and allows the higher frequency
													 // signals to stand out.
		lfac = (numsamples/.01)/(i/(numsamples/16.0)+0.6)+(numsamples);

													 // This takes the real and imaginary
													 // data and calculates a magnitude
		outdata[i] = (outdata[i]*outdata[i] + outidata[i]* outidata[i])/lfac;
		if(outdata[i] > max) outdata[i] = max;



													 // Perform time smoothing.
													 // Time smoothing seems to make the FFT
													 // look prettier.  The
													 // smoothing coefficient should run from
													 // 0 to 1.0: 0 = no smoothing, 1.0 =
													 // extreme smoothing.
		inarray[i] *= smoothfactor;
		inarray[i] += outdata[i]*(1.0-smoothfactor);
	}


}

/**************************************************************************
	void player(char *musicfile)

	DESCRIPTION: Main routine for playing

	INPUTS:
		musicfile	Name of file to load

**************************************************************************/
void player(char *musicfile)
{
	MOD *mymod;                         // music data handles
	S3M *mys3m;
	WORD skip;                          // #bytes to skip in dma buffer
	int width = 128, height = 50;       // window sizes
	int framey=130;                     // y value for frame location
	DWORD vt=0;                         // vclock timer varaible
	WORD bufpos=1000;                   // data buffer position
	WORD shortpos=0;										// Tracks fft rate
	WORD dmaspot=0;                     // location in dma mix buffer
	WORD fftfrequency = 50;             // frequency (in htz) to fft buffer
	WORD maxpos;                        // temporary hold for buffer size
	double xcon;                        // X axis conversion varaible
	int i;                              // counter
	char r= ' ';                        // user input holder
	int animateraw = 1;                    // Animation toggle holder
	int animatefft = 1;                    // Animation toggle holder
	int animatetimefft = 1;                // Animation toggle holder
	int animatebits = 0;                    // Animation toggle holder
	int numsamples = 256;              // FFT sample size
	int buffernum  = 0;                 // DMA buffer number
	int x = 10;                         // x value for fft time display
	long lfac;                          // FFT correction factor
	double hfac;                     		// used for raw data drawing
	int musictype = 0;                  // 1 = mod, 2 = s3m;
	double tsmooth = 0.5;								// time smoothing coefficient
	WORD t;
	int ix;
	char str[255];
	float fps = 0;
	long mem;

																			// Load music file and play it
	mem = farcoreleft();
	strupr(musicfile);
	if(strstr(musicfile,".MOD")) {
		mymod = LoadMod(musicfile,errstring);
		if(!mymod) {
			restext();
			printf("Error: %s\n",errstring);
			getch();
			return;
		}

		mod_data = mymod;
		ModCommand(v_play);
	}
	else if(strstr(musicfile,".S3M")) {
		mys3m = LoadS3M(musicfile,errstring);
		if(!mys3m) {
			restext();
			printf("Error: %s\n",errstring);
			getch();
			return;
		}

		s3m_data = mys3m;
		S3MCommand(v_play);

	}
	else {
		restext();
		printf("Unknown file extension for %s\n",musicfile);
		getch();
		return;
	}

	sprintf(str,"Memory change: %d Kb",(mem-farcoreleft())/1000);
	drwstring(SET,15,0,str,10,10);

																		// =========== Prepare varaibles

																		// skip = Number of bytes to skip
																		// while gathering data drom DSP buffer.
																		// High skip values will tend to wash
																		// out low frequency signals, and high
																		// skip values will clip high frequency
																		// signals.  samplerate/skip will give
																		// you the fft max frequency.
	skip = sample_rate/2812.0 + 0.5;

																		// maxpos signals the code to stop
																		// building up data and perform an
																		// FFT on it.
	maxpos = ((double)sample_rate/fftfrequency)/skip;

																		// Prepare screen
	fillscreen(0);
	drwbox(SET,14,9,framey-1,9+width+2,framey-1+height+2);
	drwbox(SET,14,169,framey-1,169+width+2,framey-1+height+2);
	for(i = 0; i < 64; i++) {
		drwline(SET,i+16,160,framey+height-i,165,framey+height-i);
	}


	TimerOn();
																		// Main loop.
	while(r != 'q')	{

		if(kbhit()) {                   // Check for KB input
			r = getch();
			if(r == '1') animateraw ^= 1;
			if(r == '2') animatebits ^= 1;
			if(r == '3') animatefft ^= 1;
			if(r == '4') animatetimefft ^= 1;
		}


		if(vt != vclock) {              // has vat mixed a new 1/2 buffer?
			vt = vclock;
																		// Grab next bytes
			for(; dmaspot < dma_bufferlen; dmaspot += skip) {
				bigbuffer[bufpos++] = *(dma_buffer[buffernum]+dmaspot)-127;
				shortpos++;
			}
			buffernum ^= 1;               // switch buffers
			dmaspot -= dma_bufferlen;     // reset buffer location.


			if(shortpos > maxpos) {         // ready for an FFT?
																		// Calculate frame rate
				t = TimerOff();
				fps = 0.95 * fps + 0.05 * 1.14e06/t;
				sprintf(str,"%.2lf FPS",fps);
				drwstring(SET,15,0,str,1,100);
				TimerOn();

																		// Roll back our buffer if it has gone
																		// too far.
				if(bufpos > 5000-numsamples*2) {
					memcpy(&bigbuffer[0],&bigbuffer[bufpos-numsamples],numsamples*sizeof(int));
					bufpos = numsamples;
				}

																		// Draw things!
				if(animateraw) {
																		// Show raw sample data
					xcon = (double)width/numsamples;
					drwfillbox(SET,0,10,framey,10+ width,framey+height);
					hfac = height/256.0;
					for(i = 0 ; i < width; i++) {
						drwpoint(SET,13,10+i,bigbuffer[i/xcon+bufpos-numsamples]*hfac + framey+height/2);
					}
				}
																		// Do the transform
				if(animatefft || animatetimefft) {

																		// Copy Data
					for(i = 0; i < numsamples; i++) {
						enhanced[i] = bigbuffer[bufpos-numsamples + i];
					}

					dofft(enhanced);

				}
																	 // Animate bar graph fft
				if(animatefft) {
					xcon = (double)width/(numsamples/2.0);

																		// Show FFT graphicly
					drwfillbox(SET,0,170,framey,170+ width,framey+height);

					for(i = 1; i < numsamples/2; i++) {
						ix = 170+i*xcon;
						drwline(SET,10,ix,framey+height-enhanced[i]/2,ix,framey+height);
																	 // Show correction factor
					drwpoint(SET,12,ix,framey+height-lfac/0.5);
					}
				}

																	 // Animate chromatic time-varying fft
				if(animatetimefft) {

					for(i = 1; i < numsamples/2; i++) {
						drwpoint(SET,enhanced[i]/2+16,x,i);
					}
					x++;                     // move time-varying FFT along
					if(x > maxx) x = 0;
				}

				if(animatebits) {
					channelbits();           // Do that nifty bit thing

				}
				shortpos = 0;
			}

		}

	}
																	// Tie up loose ends
	switch (musictype) {
		case 1:
			FreeMod(mymod);
			break;
		case 2:
			FreeS3M(mys3m);
			break;

	}
}


/**************************************************************************
	void channelbits(void)

	DESCRIPTION: This shows all of the bits used in a channel structure.

**************************************************************************/
void channelbits(void)
{
	int size;
	int height,width;
	CHANNEL *chan;
	int i,j,b,color;
	WORD *wd,val;
																			// Grab the right channels
	if(mod_on) {
		chan = ModChannels();
	}
	else if(s3m_on) {
		chan = S3MChannels();

  }

	size = sizeof(CHANNEL);             // Get number of cytes in channel struct
	height = size/2+1;                  // Figure window height
	width = 36;                         // Enough width for 16 bits

																			// Draw first 4 channels
	for( i = 0; i < 4; i++) {

		wd = (WORD *)(&chan[i]);          // get start address of channel
																			// Draw a frame
		drwbox(SET,8,i*(width+5)+120,10,i*(width+5)+120+width,10+height);

																			// loop down channel by words
		for(j = 0; j < size/2; j++) {
			val = *wd;                      // grab a word
			wd++;                           // move to next word
																			// clear this line
			drwline(SET,8,i*(width+5)+120,11+j,i*(width+5)+120+width,11+j);
																			// draw bits in this word
			for(b = 0; b < 16; b++) {
				color = (val & 0x01) *14;
				if(!color) color = 6;
				drwpoint(SET,color,i*(width+5)+122+b*2,11+j);
				val >>= 1;
			}
		}
	}

}
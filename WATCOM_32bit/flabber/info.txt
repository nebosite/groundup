WATCOM C/C++32 Compile and Link Utility Version 10.0
Copyright by WATCOM International Corp. 1988, 1994. All rights reserved.
WATCOM is a trademark of WATCOM International Corp.
Usage:  wcl386 {option(s)} {file(s)}
Options:  ( - option is also accepted )
/c  compile only, no link             /y ignore the WCL386 environment variable
/cc treat source files as C code      /cc++ treat source files as C++ code
                           [Preprocessor options]
/d<name>[=text] define a macro        /p   preprocess file
/d+ extend syntax of /d option        /pl  output #line directives
/fo=<filename> set object file name   /pc  output comments
/i=<directory>  include directory     /plc output #line and comments
/u<name>  undefine macro name
Press any key to continue:
                             [Compiler options]
/3r 386 register calling conventions  /nm=<module_name> set module name
/3s 386 stack calling conventions     /nt=<name>  set text segment name
/4r 486 register calling conventions  /r  save/restore segregs across calls
/4s 486 stack calling conventions     /s  remove stack overflow checks
/5r Pentium register calling conv.    /v  output func declarations to .def
/5s Pentium stack calling conventions /w<number>  set warning level number
/d1{+} line number debugging info.    /we treat all warnings as errors
/d2 full symbolic debugging info.     /z{a,e} disable/enable extensions
/e<number>  set error limit number    /zc place strings in CODE segment
/ee  call epilogue hook routine       /zd{f,p} DS floats vs DS pegged to DGROUP
/ei  force enums to be type int       /zf{f,p} FS floats vs FS pegged to seg
/en  emit routine names in the code   /zg{f,p} GS floats vs GS pegged to seg
/ep[=<num>] call prologue hook routine/zg  generate function prototypes
/ez  generate PharLap EZ-OMF object   /zk{0,0u,1,2} double-byte char support
/fh=<filename> pre-compiled headers   /zku=<codepage> UNICODE support
/fi=<filename> force include of file  /zl  remove default library information
/fo=<filename> set object file name   /zld remove file dependency information
/g=<codegroup> set code group name    /zm  place functions in separate segments
/hc codeview debug format             /zp{1,2,4,8} set struct packing alignment
/hd dwarf debug format                /zq  operate quietly
/hw watcom debug format               /zs  check syntax only
/j  change char default to signed     /zt<number> set data threshold
/m{f,s,m,c,l}  memory model           /zu  SS != DGROUP
/nc=<name>  set CODE class name       /zw  Microsoft Windows
/nd=<name>  set data segment name
Press any key to continue:
                           [Optimization options]
/oa relax alias checking              /on generate agressive floating-point
/oc disable call/ret optimization     /oo continue compiling when low on memory
/od disable optimizations             /op improve floating-point consistency
/oe{=num} expand functions inline     /or re-order instructions to avoid stalls
/of{+} generate traceable stack frames/os optimize for space
/oi inline intrinsic functions        /ot optimize for time
/ol perform loop optimizations        /ou ensure unique addresses for functions
/om generate inline math functions    /ox maximum optimization (/oilr /s)
                          [Floating-point options]
/fpc calls to floating-point library  /fpi87 inline 387 instructions
/fpi inline 8087 with emulation       /fp2   inline 287 instructions
/fpr use old floating-point convention/fp3   inline 387 instructions
/7   same as /fpi87                   /fp5  generate Pentium optimized code
                              [Linker options]
/bd  build Dynamic link library       /fm[=<map_file>]  generate map file
/bm  build Multi-thread application   /k<stack_size> set stack size
/bw  build default Windowing app.     /l=<system> link for the specified system
/bt=<os> build target OS.             /x  make names case sensitive
/fd[=<directive_file>] directive file @<directive_file> include file
/fe=<executable> name executable file /"linker directives"
WATCOM C32 Optimizing Compiler  Version 10.0a
Copyright by WATCOM International Corp. 1984, 1994. All rights reserved.
WATCOM is a trademark of WATCOM International Corp.
Usage: wcc386 [options] file [options]
Options:
	     ( /option is also accepted )
-b{m,d,w}	build (Multi thread,Dynamic link,Default windowing)
-bt[=<os>]	build target for operating system <os>
-db		generate browsing information
-d1{+}		line number debugging information
-d2		full symbolic debugging information
-d3		full symbolic debugging with unreferenced type names
-d+		allow extended -d macro definitions
-d<name>[=text] precompilation #define name [text]
-e<number>	set error limit number
-fh=<file_name>  use pre-compiled headers
-fhq=<file_name> use pre-compiled headers quietly
-fi=<file_name> force file_name to be included
-fo=<file_name> set object or preprocessor output file name
-ei		force enums to be type int
-en		emit routine names in the code segment
-ep[<number>]	call prologue hook routine with number stack bytes available
-ee		call epilogue hook routine
-ez		generate PharLap EZ-OMF object files
-fpc		calls to floating-point library
-fpi		inline 80x87 instructions with emulation
-fpi87		inline 80x87 instructions
-fp2		optimize floating-point for 287
-fp3		optimize floating-point for 387
-fp5		optimize floating-point for Pentium
-fpr		generate backward compatible 80x87 code
-g=<codegroup>	set code group name
-h{w,d,c}	set debug output format (Watcom,Dwarf,Codeview)
-i=<directory>	another include directory
-j		change char default from unsigned to signed
-m{s,m,c,l,f}	memory model (Small,Medium,Compact,Large,Flat)
-3r		386 register calling conventions
-3s		386 stack calling conventions
-4r		486 register calling conventions
-4s		486 stack calling conventions
-5r		Pentium register calling conventions
-5s		Pentium stack calling conventions
-7		inline 80x87 instructions
-nc=<name>	set code class name
-nd=<name>	set data segment name
-nm=<name>	set module name
-nt=<name>	set name of text segment
-o{a,c,d,e,f[+],i,l,m,n,o,p,r,s,t,u,x} control optimization
    a		-> relax aliasing constraints
    c		-> disable <call followed by return> to <jump> optimization
    d		-> disable all optimizations
    e[=<num>]	-> expand user functions inline. <num> controls max size
    f		-> generate traceable stack frames as needed
    f+		-> always generate traceable stack frames
    i		-> expand intrinsic functions inline
    l		-> enable loop optimizations
    l+		-> enable loop unrolling
    m		-> generate inline 80x87 code for math functions
    n		-> allow numerically unstable optimizations
    o		-> continue compilation if low on memory
    p		-> generate consistent floating-point results
    r		-> reorder instructions for best pipeline usage
    s		-> favor code size over execution time in optimizations
    t		-> favor execution time over code size in optimizations
    u		-> all functions must have unique addresses
    x		-> equivalent to -omiler -s
    z		-> do not assume a pointer deref implies pointer not NULL
-p{l,c,w=<num>} preprocess file
    l		-> insert #line directives
    c		-> preserve comments
    w=<num>	-> wrap output lines at <num> columns. Zero means no wrap.
-r		save/restore segment registers across calls
-ri		return chars and shorts as ints
-s		remove stack overflow checks
-sg		generate calls to grow the stack
-st		touch stack through SS first
-u<name>	undefine macro name
-v		output function declarations to .def
-w<number>	set warning level number
-we		treat all warnings as errors
-z{a,e} 	disable/enable language extensions
-zc		place literal strings in the code segment
-zdf		DS floats i.e. not fixed to DGROUP
-zdp		DS is pegged to DGROUP
-zdl		Load DS directly from DGROUP
-zff		FS floats i.e. not fixed to a segment
-zfp		FS is pegged to a segment
-zgf		GS floats i.e. not fixed to a segment
-zgp		GS is pegged to a segment
-zg		generate function prototypes using base types
-zk{0,1,2}	double-byte char support: 0=Kanji,1=Chinese/Taiwanese,2=Korean
-zk0u		translate double-byte Kanji to UNICODE
-zku=<codepage> load UNICODE translate table for specified code page
-zl		remove default library information
-zld		remove file dependency information
-zm		place each function in separate segment
-zp{1,2,4,8}	pack structure members
-zq		operate quietly
-zs		syntax check only
-zt<number>	set data threshold
-zu		SS != DGROUP
-zw		generate code for Microsoft Windows
